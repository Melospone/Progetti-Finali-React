{"ast":null,"code":"import $89yE2$react, { useContext as $89yE2$useContext, useState as $89yE2$useState, useMemo as $89yE2$useMemo, useLayoutEffect as $89yE2$useLayoutEffect, useRef as $89yE2$useRef } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $704cf1d3b684cc5c$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0,\n  isSSR: false\n};\nconst $704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, $89yE2$react).createContext($704cf1d3b684cc5c$var$defaultContext);\n\nfunction $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {\n  let cur = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);\n  let counter = $704cf1d3b684cc5c$var$useCounter(cur === $704cf1d3b684cc5c$var$defaultContext);\n  let [isSSR, setIsSSR] = (0, $89yE2$useState)(true);\n  let value = (0, $89yE2$useMemo)(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n    current: 0,\n    isSSR: isSSR\n  }), [cur, counter, isSSR]); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== \"undefined\") // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $89yE2$useLayoutEffect)(() => {\n      setIsSSR(false);\n    }, []);\n  return /*#__PURE__*/(0, $89yE2$react).createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nlet $704cf1d3b684cc5c$var$componentIds = new WeakMap();\n\nfunction $704cf1d3b684cc5c$var$useCounter() {\n  let isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let ctx = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);\n  let ref = (0, $89yE2$useRef)(null);\n\n  if (ref.current === null && !isDisabled) {\n    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner; // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n\n\n    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $89yE2$react).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n\n    if (currentOwner) {\n      let prevComponentValue = $704cf1d3b684cc5c$var$componentIds.get(currentOwner);\n      if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.\n        $704cf1d3b684cc5c$var$componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        $704cf1d3b684cc5c$var$componentIds.delete(currentOwner);\n      }\n    }\n\n    ref.current = ++ctx.current;\n  }\n\n  return ref.current;\n}\n\nfunction $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {\n  let ctx = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n  let counter = $704cf1d3b684cc5c$var$useCounter(!!defaultId);\n  return defaultId || `react-aria${ctx.prefix}-${counter}`;\n}\n\nfunction $704cf1d3b684cc5c$export$535bd6ca7f90a273() {\n  let cur = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);\n  return cur.isSSR;\n}\n\nexport { $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae as SSRProvider, $704cf1d3b684cc5c$export$619500959fc48b26 as useSSRSafeId, $704cf1d3b684cc5c$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"mappings":"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","names":["$704cf1d3b684cc5c$var$defaultContext","prefix","String","Math","round","random","current","isSSR","$704cf1d3b684cc5c$var$SSRContext","createContext","$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae","props","cur","counter","$704cf1d3b684cc5c$var$useCounter","setIsSSR","value","window","Provider","children","$704cf1d3b684cc5c$var$canUseDOM","Boolean","document","createElement","$704cf1d3b684cc5c$var$componentIds","WeakMap","isDisabled","ctx","ref","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","currentOwner","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner","prevComponentValue","get","set","id","state","memoizedState","delete","$704cf1d3b684cc5c$export$619500959fc48b26","defaultId","console","warn","$704cf1d3b684cc5c$export$535bd6ca7f90a273"],"sources":["C:\\Users\\utente\\OneDrive\\Desktop\\Progetti Finali React\\jobs\\node_modules\\@react-aria\\ssr\\dist\\packages\\@react-aria\\ssr\\src\\index.ts","C:\\Users\\utente\\OneDrive\\Desktop\\Progetti Finali React\\jobs\\node_modules\\@react-aria\\ssr\\dist\\packages\\@react-aria\\ssr\\src\\SSRProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {SSRProvider, useSSRSafeId, useIsSSR} from './SSRProvider';\nexport type {SSRProviderProps} from './SSRProvider';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number,\n  isSSR: boolean\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0,\n  isSSR: false\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let counter = useCounter(cur === defaultContext);\n  let [isSSR, setIsSSR] = useState(true);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${counter}`,\n    current: 0,\n    isSSR\n  }), [cur, counter, isSSR]);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined') {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet componentIds = new WeakMap();\n\nfunction useCounter(isDisabled = false) {\n  let ctx = useContext(SSRContext);\n  let ref = useRef<number | null>(null);\n  if (ref.current === null && !isDisabled) {\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentOwner?.current;\n    if (currentOwner) {\n      let prevComponentValue = componentIds.get(currentOwner);\n      if (prevComponentValue == null) {\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });\n      } else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        componentIds.delete(currentOwner);\n      }\n    }\n\n    ref.current = ++ctx.current;\n  }\n\n  return ref.current;\n}\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  let counter = useCounter(!!defaultId);\n  return defaultId || `react-aria${ctx.prefix}-${counter}`;\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  return cur.isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}